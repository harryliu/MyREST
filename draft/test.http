

tasks: 
. (done) 支持多种数据库类型
. (done) 支持Scalar标量查询
. (done)支持 parameters 
. (done) toml 判空处理
. 增加日志
. 增加单元测试
. 项目文档撰写
. (done)Firewall 改造成安全插件形式
. JWT Auth 安全插件
. 增加 health check 
. 支持优雅停机
. 支持 miniProfiler
. 支持 basic Authorization
. 提供各个语言的SDK
. 支持 base64 encoded SQL



==============================
Swagger UI url 
==============================
http://localhost:5001/swagger/index.html 


GET http://localhost:5001/health
content-type: application/json

==============================
API format 
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "string",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "string",
      "sqlId": "string",
      "sql": "string",
      "parameters": [
        {
          "name": "string",
          "value": "string",
          "dataType": "string",
          "direction": "string",
          "format": "string",
          "separator":"string"
        }
      ]
    },
    "traceId": "string"
  }
}

   
==============================
Test client side SQL 
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}

==============================
Test Scalar select 
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



==============================
Test BasicAuth 安全插件
dXNlcjEyMzpwYXNzd29yZDEyMw== 是 user123:password123 的base64形式
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json
Authorization: Basic dXNlcjEyMzpwYXNzd29yZDEyMw==

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}


==============================
Test BasicAuth 安全插件
dXNlcjEyMzpwYXNzd29yZDEyMw== 是 user123:password123 的base64形式
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjpbeyJ0b29sdHQiOiJodHRwczovL3Rvb2x0dC5jb20ifV0sImlhdCI6MTY4MTM5Mjc4MiwiZXhwIjoxNjgxNDAxNTk5LCJhdWQiOiJteXJlc3QgY2xpZW50IiwiaXNzIjoic29tZSBhdXRoIHNlcnZlciIsInN1YiI6IiJ9.t6nut-GtmfiMfjMutlv0yFBuUUR9GC8kVoi4ICEDQiY

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



==============================
Test DML statement  
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": false,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "update actor set first_name='10' where actor_id=1 ;update actor set first_name='20' where actor_id=2 ; ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}

==============================
Test server side sql
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "/sampleSql.xml",
      "sqlId": "queryAllActors",
      "sql": "",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}




==============================
compress response
==============================
POST http://localhost:5001/run HTTP/1.1
Content-type: application/json
Accept-Encoding: br, gzip

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



==============================
Test client side SQL with parameter
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor   where actor_id=@actorId1 or actor_id=@actorId2     ",  
      "parameters":[
         {
          "name": "@actorId1",
          "value": "1",
          "dataType": "Int32",
          "direction": "Input",
          "format": "",
          "separator":""
        },
        {
          "name": "@actorId2",
          "value": "20",
          "dataType": "Int32",
          "direction": "Input",
          "format": "",
          "separator":""
        }
      ]
    },
    "traceId": "1111"
  }
}


==============================
Test server side SQL with parameters
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "sampleSql.xml",
      "sqlId": "queryOneActor",
      "sql": "",  
      "parameters":[
         {
          "name": "@id",
          "value": "1",
          "dataType": "",
          "direction": "",
          "format": "",
          "separator":""
        }
      ]
    },
    "traceId": "1111"
  }
}

 

==============================
Test IN clause for MySQL DB
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,      
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate  from actor where actor_id in @ids",  
      "parameters":[
         {
          "name": "@id",
          "value": "1,2",
          "dataType": "Decimal Array",
          "direction": "Input",
          "format": ",",
          "separator":","
        }
      ]
    },
    "traceId": "1111"
  }
}



==============================
Test IN clause for MS SQL server DB
==============================
POST http://localhost:5001/run HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "northwind",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select * from oee.dbo.OEE_Hour_Dimension where Hour_Id in @hourid ",  
      "parameters":[       
        {
          "name": "@hourid",
          "value": "2021-12-16 00,2021-12-16 10",
          "dataType": "String Array",
          "direction": "Input",
          "format": "",
          "separator":","
        }
      ]
    },
    "traceId": "1111"
  }
}
 

===========================
kestrel web server:
https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel/endpoints?view=aspnetcore-6.0
https://geeksarray.com/blog/aspnet-core-application-and-kestrel-web-server-settings
https://www.tektutorialshub.com/asp-net-core/asp-net-core-kestrel-web-server/
===========================


===========================
mini profiler 
https://www.cnblogs.com/lwqlun/p/10222505.html
https://code4it.dev/blog/miniprofiler/
https://ilovedotnet.org/blogs/profiling-webapi-with-mini-profiler/
===========================

## Auth API 设计
https://blog.csdn.net/HongzhuoO/article/details/115290559
https://dapper-tutorial.net/parameter-dynamic
参考 [](https://jasonwatmore.com/post/2021/06/15/net-5-api-jwt-authentication-with-refresh-tokens)

[](https://www.cnblogs.com/ittranslator/p/refresh-jwt-with-refresh-tokens-in-asp-net-core-5-rest-api-step-by-step.html)
[](https://jasontaylor.dev/api-key-authentication-with-aspnetcore/)
[](https://andrewlock.net/5-new-mvc-features-in-dotnet-7/)
[](https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-7.0)
[](https://www.cnblogs.com/lwqlun/p/10222505.html)
[](https://github.com/ZeeLyn/Dapper.Extensions)
### public 认证接口
``` json
POST /myrest/auth/access-token  HTTP/1.1
content-type: application/json

{
    "username": "username",
    "password ": "password",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "accessToken": "accessToken",
    "refreshToken ": "refreshToken",
	"message ": "Token issued"
} 
```
 
### public 的refresh-token接口
``` json
POST /myrest/auth/refresh-token  HTTP/1.1
content-type: application/json

{
    "refreshToken": "refreshToken",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "accessToken": "accessToken",
    "refreshToken ": "refreshToken",
	"message ": "Token issued"
} 
``` 

### secure 的 revoke-token接口
``` json
POST /myrest/auth/refresh-token  HTTP/1.1
content-type: application/json

{
    "refreshToken": "refreshToken",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "message ": "Token revoked"
} 
```  




## 安全方面的设计
- 后台数据库中, 需要增加一个表 myrest_users, 该table将作为前端应用的登录账号表, 对于具体应用可以再为这个表配一个从表, 用于扩展用户信息. 
- myrest_users 表的字段: username, password, refreshToken, refreshTokenExpireTime,clientInfo,lockedFlag,lastLogin 字段.
- 前端系统登录时即访问 /myrest/auth 获取 accessToken 和 refreshToken, 之后调用 myrest/service 需要带上 accessToken. 说明: 在每次提交data service 之前需要先判断 accessToken 是否过期, 如过期的话, 需要先刷新 refresh token, 如 refreshToken 也过期了, 需要跳转到登录界面. 
- accessToken 的 Expires 为 10 分钟,  refreshToken Expires 为 60 分钟, 刷新 refreshToken 需要带 clientInfo, 避免被盗用. 
- 系统支持客户端SQL和服务端SQL两种形式, 对于正式项目更推荐使用服务端SQL形式, 避免泄漏后台数据库结构.

## 两个工具
- myrest: 这是一个 api server
- myrest_tool: 这是一个命令行工具, 用来生成  myrest_users 表, 增加/删除/锁定 myrest_users 的用户记录

## 后台配置
```toml
[system]
    debug=true  #启用debug模式, 将不需要进行authentication
    port = 3000
    host = localhost
	enableClientSql =true
[auth]
	enabled = true  
	type = "body"
	encrypt = "MD5"
	accessTokenExpires=10	
	refreshTokenExpire=60
	jwtKey="secret"
	jwtAlgo="HS256"
[database]
    dbType=sqlite,mysql,mssql,postgresql,oracle
	connectionString=""
	sqlPath=""
```