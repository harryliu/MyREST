

tasks: 
. (done) 支持多种数据库类型
. (done) 支持Scalar标量查询
. (done)支持 parameters 
. (done) toml 判空处理
. 增加日志
. 增加单元测试
. 项目文档撰写
. (done)Firewall 改造成安全插件形式
. JWT Auth 安全插件
. 增加 health check 
. 支持优雅停机
. 支持 miniProfiler
. 支持 basic Authorization
. 提供各个语言的SDK
. 支持 base64 encoded SQL


==============================
index url
==============================
GET http://localhost:5001/
content-type: application/json

==============================
Swagger UI url 
==============================
http://localhost:5001/swagger/index.html 


==============================
health check  url 
==============================
GET http://localhost:5001/health
content-type: application/json



==============================
App status check  url 
behind firewall
==============================
GET http://localhost:5001/status
content-type: application/json




==============================
API format 
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "string",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "string",
      "sqlId": "string",
      "sql": "string",
      "parameters": [
        {
          "name": "string",
          "value": "string",
          "dataType": "string",
          "direction": "string",
          "format": "string",
          "separator":"string"
        }
      ]
    },
    "traceId": "string"
  }
}

   
==============================
Test client side SQL 
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}

==============================
Test greenChannelSelect select 
no need check BasicAuth/JwtAuth.
only server side select statement is allowed, and recordset must have 1 row
==============================
POST http://localhost:5001/greenChannelSelect HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "/sampleSql.xml",
      "sqlId": "queryOneActor",
      "sql": "",  
      "parameters":[
         {
          "name": "@id",
          "value": "1",
          "dataType": "",
          "direction": "",
          "format": "",
          "separator":""
        }
      ]
    },
    "traceId": "1111"
  }
}



==============================
Test Scalar select 
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



==============================
Test BasicAuth 安全插件
dXNlcjEyMzpwYXNzd29yZDEyMw== 是 user123:password123 的base64形式
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json
Authorization: Basic dXNlcjEyMzpwYXNzd29yZDEyMw==

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}


==============================
Test JwtAuth 安全插件
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json
Authorization: Bearer eyJhbGciOiJSUzI1NiIsImVudGl0bGVtZW50IjoieWxjMzJkMmFpcG8wZnJ1MDJxdWRucGMifQ.eyJpc3MiOiJzb21lIGF1dGggc2VydmVyIiwic3ViIjoibmFpbWlzaCIsImF1ZCI6Im15cmVzdCBjbGllbnQiLCJpYXQiOjE2ODE0ODAyMzIsImV4cCI6MTY4MjQ4MDgzMn0.FPDzCOffg3yNyj1E6BdUJi8r_U2gkU4I07uIi7IZj7VcjkHiSp5O9m5TVZk9y9acv7s55ttrOOSi0ptQRjARQ40xg3z1ZS-pDVHogWhSiY89fYAddGfcd_9_wKqSBDvDyZgbT0rLQxK-KSDOKlXGvnkRVdKCogKDGMVYhA4j3bCPwhMUQZzaQAbvCONy9uPiso50xIJxPSuE4erDKvfNcqrBVs7jX62JKytl8mV4ajIn3GNXbnfcctjwvnnOZAtKKNF2lHUpts6Piwqacd0kVI47oOND2KYd4q_SLmNAHMjTW780NAgt3REoyt_CPS5JEdt4lgp7kw86EI9dxtVUTg

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": true,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select count(*) from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



https://dinochiesa.github.io/jwt/ 生成的私钥/公钥和token

-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC4OcloYUhMyacW
titbVkwr1hcT72ZKglE8Msa7fdV6k5oDf41RYBoBJbzHMv6lZYgUuC8vBwxgwi/x
i9JE1rOUyumx20uztJgQHHljWbdELSnjry+1RXJaacVGgakbRVGX2fl41LPiImbb
Nv7PpAjkNF34pVUcunDDIpZdMfCaDLaa+9PSiEGMqdbz8tf+vQfTSol3l8lVHApa
kZRfj9SFQ/A7+U3Apu6RX4kco5DrK1uAcsKBMhLFi1Pd2zMFUxh6hD1iUSpVxpR5
kpAjKcaDAEsSBVSGe28mBJTYPBsLrI9QGXTFdqa1mLP3cMTltatMKBpKo8ZFEM63
IQx6Ye2RAgMBAAECggEAGeN3q+UX3ZVCQiJ2yflrmjFrbCVqpjKAAJ9QvCJScKJI
tLsk/HguegDNRt+iAf4tobPBtbBziy60Fr6ZCDbKZQYgJxqecxzVeFYisip2Yuyc
hAl8q9LxifEZLu+jowMaaeYmH6vMXOKMD7w/vKWG4QLW6HfbaRPDgDiJEYRQv7pS
UCpZW3/7BoNike4Y22KkXlNtVBOqUJ31608KdCWQZVYV1AG3iTNF0Rnc/CbE6mmj
MdixzKBR4tROU+zPA3sAk+OpwFbNSiekMW6yuifi3I7zGDcxAXc+N+xJf3DMA9nH
gnRmj2pugG1jPg8gO2ltMfWabRA5w49lXM8ve2vNjQKBgQDvRbWfgd8BokNDxleH
Q3M4z+EP3SYYPDxCzwcrhJbw1ilqlDGZIai0pUcHy6gsii7HGl0i+kXJ+RoL9fmp
AyQesFzw8j2wBTxSh47BsYycNcyuOOI2+HY2IMToOcO2GWkLmpBV/uSw+5J9oA5T
a3mW1Z11ApBLyoBMbUxLK2474wKBgQDFGuaiJ23QidBLHFEowWrkzpXImOf8AtxR
WGLhOEuNLtEf3rNq0plCHKgQeqgHA2qOGA1sdIvCZYO7z/ZvTmSRBrdaHSIjFtXt
+AzAqR3TxquCoZKQxem7K46rrBeCcHn+4T58NMHY0APBvVLxa7v03aVURa08rtiR
4tGy2K/S+wKBgQCgdZE9bOzOvbB6TRL5xQQKP25hIx+e9RY8f3YBeyN2U0jnDobM
eMQYkRY3Zh5b8Dc6krWO9WPD9OfAya4p589bPU62zt0LpBc2CW50+sqfH30qAT/D
OZCc8BDc45AaGKRXgcn1wcA/6BXvZVz2GIcr3gmAJL379ctgdZPKfU+pnQKBgQCt
4kWE1/Pw/SNcn+aZZci/geBxzzMZCA0FVkwlFFzSeHLVAsqVeqTpxg4eO5bwWPsv
z9hHzaleHeBRV+231Bi0OJCYVws+mW6xORtG++rsYV/9Jjz+qxq/nHWIzZEP6do2
GM/fE0vP0fL+f98kTD7MjpzD85QY7MbyLH+Cn9a88QKBgQCOfMJvDswSvl0BHqu1
PHCnxQA8dtPvulpHp7Dv5jyo23c7ejNj2fT2QdTcn0O6u3cbPVr2HD0CG3UJMj16
aPLqrbGg40kSpq7lBySNjzDkhrUUEvjNshb8ZWzY6qvPiV2szC/0Z4taQYcw85ql
7Pc6Xt7MuA+7DZ6LaN9Ysy+jLA==
-----END PRIVATE KEY-----



-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuDnJaGFITMmnFrYrW1ZM
K9YXE+9mSoJRPDLGu33VepOaA3+NUWAaASW8xzL+pWWIFLgvLwcMYMIv8YvSRNaz
lMrpsdtLs7SYEBx5Y1m3RC0p468vtUVyWmnFRoGpG0VRl9n5eNSz4iJm2zb+z6QI
5DRd+KVVHLpwwyKWXTHwmgy2mvvT0ohBjKnW8/LX/r0H00qJd5fJVRwKWpGUX4/U
hUPwO/lNwKbukV+JHKOQ6ytbgHLCgTISxYtT3dszBVMYeoQ9YlEqVcaUeZKQIynG
gwBLEgVUhntvJgSU2DwbC6yPUBl0xXamtZiz93DE5bWrTCgaSqPGRRDOtyEMemHt
kQIDAQAB
-----END PUBLIC KEY-----


==============================
Test DML statement  
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": false,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "update actor set first_name='10' where actor_id=1 ;update actor set first_name='20' where actor_id=2 ; ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}

==============================
Test server side sql
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "/sampleSql.xml",
      "sqlId": "queryAllActors",
      "sql": "",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}




==============================
compress response
==============================
POST http://localhost:5001/sql HTTP/1.1
Content-type: application/json
Accept-Encoding: br, gzip

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor      ",  
      "parameters":[]
    },
    "traceId": "1111"
  }
}



==============================
Test client side SQL with parameter
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate   from actor   where actor_id=@actorId1 or actor_id=@actorId2     ",  
      "parameters":[
         {
          "name": "@actorId1",
          "value": "1",
          "dataType": "Int32",
          "direction": "Input",
          "format": "",
          "separator":""
        },
        {
          "name": "@actorId2",
          "value": "20",
          "dataType": "Int32",
          "direction": "Input",
          "format": "",
          "separator":""
        }
      ]
    },
    "traceId": "1111"
  }
}


==============================
Test server side SQL with parameters
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "sampleSql.xml",
      "sqlId": "queryOneActor",
      "sql": "",  
      "parameters":[
         {
          "name": "@id",
          "value": "1",
          "dataType": "",
          "direction": "",
          "format": "",
          "separator":""
        }
      ]
    },
    "traceId": "1111"
  }
}

 

==============================
Test IN clause for MySQL DB
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json
Authorization: Basic dXNlcjEyMzpwYXNzd29yZDEyMw==

{
  "request": {
    "sqlContext": {
      "db": "sakila",
      "isSelect": true,
      "isScalar": false,      
      "sqlFile": "",
      "sqlId": "",
      "sql": "select actor_id , first_name FirstName, last_name LastName, last_update LastUpdate  from actor where actor_id in @ids",  
      "parameters":[
         {
          "name": "@ids",
          "value": "1,2",
          "dataType": "Decimal Array",
          "direction": "Input",
          "format": ",",
          "separator":","
        }
      ]
    },
    "traceId": "1111"
  }
}



==============================
Test IN clause for MS SQL server DB
==============================
POST http://localhost:5001/sql HTTP/1.1
content-type: application/json

{
  "request": {
    "sqlContext": {
      "db": "northwind",
      "isSelect": true,
      "isScalar": false,
      "sqlFile": "",
      "sqlId": "",
      "sql": "select * from oee.dbo.OEE_Hour_Dimension where Hour_Id in @hourid ",  
      "parameters":[       
        {
          "name": "@hourid",
          "value": "2021-12-16 00,2021-12-16 10",
          "dataType": "String Array",
          "direction": "Input",
          "format": "",
          "separator":","
        }
      ]
    },
    "traceId": "1111"
  }
}
 

===========================
kestrel web server:
https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel/endpoints?view=aspnetcore-6.0
https://geeksarray.com/blog/aspnet-core-application-and-kestrel-web-server-settings
https://www.tektutorialshub.com/asp-net-core/asp-net-core-kestrel-web-server/
===========================


===========================
mini profiler 
https://www.cnblogs.com/lwqlun/p/10222505.html
https://code4it.dev/blog/miniprofiler/
https://ilovedotnet.org/blogs/profiling-webapi-with-mini-profiler/
===========================

## Auth API 设计
https://blog.csdn.net/HongzhuoO/article/details/115290559
https://dapper-tutorial.net/parameter-dynamic
参考 [](https://jasonwatmore.com/post/2021/06/15/net-5-api-jwt-authentication-with-refresh-tokens)

[](https://www.cnblogs.com/ittranslator/p/refresh-jwt-with-refresh-tokens-in-asp-net-core-5-rest-api-step-by-step.html)
[](https://jasontaylor.dev/api-key-authentication-with-aspnetcore/)
[](https://andrewlock.net/5-new-mvc-features-in-dotnet-7/)
[](https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-7.0)
[](https://www.cnblogs.com/lwqlun/p/10222505.html)
[](https://github.com/ZeeLyn/Dapper.Extensions)
### public 认证接口
``` json
POST /myrest/auth/access-token  HTTP/1.1
content-type: application/json

{
    "username": "username",
    "password ": "password",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "accessToken": "accessToken",
    "refreshToken ": "refreshToken",
	"message ": "Token issued"
} 
```
 
### public 的refresh-token接口
``` json
POST /myrest/auth/refresh-token  HTTP/1.1
content-type: application/json

{
    "refreshToken": "refreshToken",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "accessToken": "accessToken",
    "refreshToken ": "refreshToken",
	"message ": "Token issued"
} 
``` 

### secure 的 revoke-token接口
``` json
POST /myrest/auth/refresh-token  HTTP/1.1
content-type: application/json

{
    "refreshToken": "refreshToken",
	"clientInfo":"clientInfo"
} 
```
返回格式:
```
{
    "message ": "Token revoked"
} 
```  




## 安全方面的设计
- 后台数据库中, 需要增加一个表 myrest_users, 该table将作为前端应用的登录账号表, 对于具体应用可以再为这个表配一个从表, 用于扩展用户信息. 
- myrest_users 表的字段: username, password, refreshToken, refreshTokenExpireTime,clientInfo,lockedFlag,lastLogin 字段.
- 前端系统登录时即访问 /myrest/auth 获取 accessToken 和 refreshToken, 之后调用 myrest/service 需要带上 accessToken. 说明: 在每次提交data service 之前需要先判断 accessToken 是否过期, 如过期的话, 需要先刷新 refresh token, 如 refreshToken 也过期了, 需要跳转到登录界面. 
- accessToken 的 Expires 为 10 分钟,  refreshToken Expires 为 60 分钟, 刷新 refreshToken 需要带 clientInfo, 避免被盗用. 
- 系统支持客户端SQL和服务端SQL两种形式, 对于正式项目更推荐使用服务端SQL形式, 避免泄漏后台数据库结构.

## 两个工具
- myrest: 这是一个 api server
- myrest_tool: 这是一个命令行工具, 用来生成  myrest_users 表, 增加/删除/锁定 myrest_users 的用户记录

## 后台配置
```toml
[system]
    debug=true  #启用debug模式, 将不需要进行authentication
    port = 3000
    host = localhost
	enableClientSql =true
[auth]
	enabled = true  
	type = "body"
	encrypt = "MD5"
	accessTokenExpires=10	
	refreshTokenExpire=60
	jwtKey="secret"
	jwtAlgo="HS256"
[database]
    dbType=sqlite,mysql,mssql,postgresql,oracle
	connectionString=""
	sqlPath=""
```